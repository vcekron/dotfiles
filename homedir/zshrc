#Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=5000
SAVEHIST=5000
unsetopt beep
#End of lines configured by zsh-newuser-install

#The following lines were added by compinstall
zstyle :compinstall filename ~/.zshrc

autoload -U compinit
compinit
#End of lines added by compinstall

#This allows setting menuselect hotkeys
zmodload zsh/complist

#This alters the appearance of autocompletion
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

#This sets the option to ignore duplicate history lines
setopt HIST_IGNORE_DUPS

#Persistant rehash for auto-completion
setopt nohashdirs
setopt nohashcmds

# This sets the case insensitivity
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}'

#This disables autocomplete of unavailable commands
zstyle ':completion:*:functions' ignored-patterns '_*'

#This shows a list of completion options
zstyle ':completion:*' menu select

#This sets the dynamic window title
termtitle () {
	case $TERM in
		xterm*|*rxvt*)
			print -Pn "\e]0;%n@%m: %~\a"
			;;
	esac
}

#This sets up the git branch prompt
setup_git_prompt () {
	if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
		unset git_prompt
		return 0
	fi

	local git_status_dirty git_branch

	if [ "$(git --no-optional-locks status --untracked-files='no' --porcelain)" ]; then
		git_status_dirty='%F{green}*'
	else
		unset git_status_dirty
	fi

	git_branch="$(git symbolic-ref HEAD 2>/dev/null)"
	git_branch="${git_branch#refs/heads/}"

	if [ "${#git_branch}" -ge 24 ]; then
		git_branch="${git_branch:0:21}..."
	fi

	git_branch="${git_branch:-no branch}"

	git_prompt=" %F{red}[%f${git_branch}${git_status_dirty}%F{red}]%f"

}

precmd () {
	termtitle
	setup_git_prompt
}

#This selects the prompt style and sets an exit status indicator
setopt promptsubst
#autoload -U promptinit
#promptinit
#prompt redhat
if [ $SSH_CONNECTION ]; then SSH="%n@%m "; else SSH=""; fi
PROMPT=%1(j.[%j].)'['$SSH%~']'%(!.#.$)' '
RPROMPT='${git_prompt}%(?..(%?%))'

#This enables the help command
autoload -U run-help
autoload run-help-git
autoload run-help-svn
autoload run-help-svk
unalias run-help &>/dev/null
alias help=run-help

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
	function zle-line-init () {
		printf '%s' "${terminfo[smkx]}"
	}
	function zle-line-finish () {
		printf '%s' "${terminfo[rmkx]}"
	}
	zle -N zle-line-init
	zle -N zle-line-finish
fi

#This prevents SIGSTOP at Ctrl-S
#stty -ixon
setopt noflowcontrol

#This enables zmv
autoload -Uz zmv

#This enables the use of colors
autoload -U colors && colors

#This sets autocd
#setopt autocd

#This sets cd to never select parent directory
zstyle ':completion:*:cd:*' ignore-parents parent pwd

#This removes the trailing slash of directories used as arguments
zstyle ':completion:*' squeeze-slashes true

#This activates auto-correction
setopt correct

#This loads a syntax highlighting plugin
#source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

#This hides gtk3 app messages about not being able to register with accessibility bus
export NO_AT_BRIDGE=1

#This sets autocomplete for aliases
setopt no_complete_aliases

#This sets default editor to nvim
export EDITOR=nvim

#Vi bindings
bindkey -v
export KEYTIMEOUT=1

bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^P' up-history
bindkey '^N' down-history

#Set mode indication in prompt
function zle-line-init zle-keymap-select {
    VIM_PROMPT="[% NORMAL]% "
	RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}${git_prompt}%(?..(%?%)) $EPS1"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

#Aliases
alias -g L="|less -FX"
alias x="chmod +x"
alias sx="sudo chmod +x"
alias cat="bat"
alias ls="exa -s type"
alias ll="exa -l -s type"
alias fsz="dust -ir"
alias grep="grep --color=auto"
alias e="$EDITOR"
alias se="sudoedit"
alias ..="cd .."
alias ..2="cd ../.."
alias ln="ln -v"
alias mkdir="mkdir -v"
alias trash="trash -v"
alias rm="noglob timeout 10 rm -iv --one-file-system"
alias rmdir="rmdir -v"
alias srm="noglob timeout 10 sudo rm -iv --one-file-system"
alias -g cp="cp -iv"
alias -g mv="mv -iv"
alias rcp="rsync -v --progress"
alias rmv="rsync -v --progress --remove-source-files"
alias sshcp="rsync -avHPe \"ssh -p$(cat ~/.ssh_port_private 2> /dev/null)\""
alias wifi-menu="sudo wifi-menu -o"

alias gs="git status -sb"
alias ga="git add"
alias gc="git commit -m"

alias hwmon="btm"
alias evpn='nordvpn connect'
alias dvpn='nordvpn disconnect'
alias cVPN='sudo chattr -i /var/lib/nordvpn/data/.config.ovpn'

alias eTUeVPN='sudo openconnect vpn2.tue.nl'

alias tTP='~/dotfiles/sysscripts/touchpadtoggle.sh'
alias eTether='sudo dhcpcd enp0s20f0u5c4i2'
alias eEth='sudo dhcpcd enp0s20f0u1u3i5'
alias TUePrint='smbclient -W TUE -U s.kronberg@tue.nl //tueprint.campus.tue.nl/MFP-CAMPUS-PS'
alias updateMatlab='sudo /usr/local/MATLAB/R2020a/bin/glnxa64/update_installer'
alias nbconvert='/opt/anaconda/bin/jupyter-nbconvert'

alias generateSRCINFO="makepkg --printsrcinfo > .SRCINFO"

alias rLogid='systemctl restart logid.service'

alias stampPDF='~/Dropbox/LaTeX_files/stampPDF'

alias rTelegram='sudo rm -r ~/.local/share/TelegramDesktop/tdata/user_data/media_cache'

alias rTasks="cat ~/Dropbox/systemFiles/conkyList | sed '/^#/,+1 d' | fold -s -w 50 | sed '/^*/! s_^_  _' > ~/.config/conky/.conkyList && pkill conky && conky --quiet"
alias uTasks="nvim ~/Dropbox/systemFiles/conkyList"
alias uGoodShit="nvim ~/Dropbox/systemFiles/goodList"
alias rConky="pkill conky && conky --quiet" #Reload Conky

#rbw reboots into Windows.
function rbw {
	local bootNum=$(efibootmgr | grep 'Windows' | grep -Eo '[0-9]{4}')
	sudo efibootmgr -n $bootNum
	reboot
}

#scrShot function with optional second arcument for scrShotX.png (where X is an integer).
#usage: scrShot <X> [flags: e.g. -s -d 2], where X is optional.
scrShot() {
    if [[ "$1" = <-> ]]
    then
		maim -u -m 1 "${@:2}" ~/scrShot"$1".png
    else
        maim -u -m 1 "$@" ~/scrShot.png
    fi
}

#yt function opens whatever URL you want as a Vivaldi app.
#usage: yt "<X>", where X is a URL. Note the ""!
yt() {
	vivaldi-stable --app="$1" > /dev/null 2>&1
}

#scrShotShadow function takes a screenshot and adds a nice shadow.
#usage: scrShotShadow X [flags: e.g. -s -d 2]
scrShotShadow() {
	maim -u -m 1 "$@" | convert - \( +clone -background black -shadow 80x3+5+5 \) +swap -background none -layers merge +repage ~/scrShot.png
}

#relinkBin relinks ~/dotiles/usr/local/bin to /usr/local/bin
relinkBin() {
	sudo rm -r /usr/local/bin
	sudo ln -s /home/$(whoami)/dotfiles/usr/local/bin /usr/local/
}

compressEncrypt() {
	zip --encrypt "$1".zip -r $1
}

#YouTube playlist functions
function playList() {
	mpv --playlist=/home/simokron/playlist --playlist-start=$1
}
function getList() {
	youtube-dl -j --flat-playlist --playlist-reverse "https://www.youtube.com/playlist?list=PLHw7hcztgbtsPtqaSvuSJezNDkT_f3wZh" | jq -r '.id' | sed 's_^_https://youtu.be/_' > /home/simokron/playlist
}

#Function optimise PDF files.
function optPDF() {
	~/dotfiles/optfile.sh $1
}

#Function to resize PDF files.
function resizePDF() {
	~/dotfiles/resizePDF.sh $1 $2
}

function extractFrames() {
	~/dotfiles/extractFrames.sh $1
}

alias Man="MANPAGER='nvim +Man!' man"

clpkg ()
{
	if [[ $(pacman -Qtd) ]]
	then
		echo "clearing unaffiliated packages..."
		sudo pacman -Rns $(pacman -Qtdq)
	else
		echo " no unaffiliated packages found"
	fi
}

syu ()
{
	trizen -Syu --devel --needed --noedit "$@"
	(~/.config/bspwm/panel_resources/updates > "$PANEL_FIFO" &)
	echo "$bold_color$fg[blue]::$fg[white] Checking for unaffiliated packages...${reset_color}"
	clpkg
}

mkcd ()
{
	mkdir -p "$1";
	cd "$1"
}

ne ()
{
	(urxvt -e $EDITOR "$@" &)
}

nse ()
{
	(urxvt -e sudoedit "$@" &)
}

new ()
{
	(urxvt -e "$@" &)
}

function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1     ;;
			*.tar.gz)    tar xvzf $1     ;;
			*.tar.xz)	 tar xvJf $1	 ;;
			*.bz2)       bunzip2 $1      ;;
			*.rar)       unrar x $1      ;;
			*.gz)        gunzip $1       ;;
			*.tar)       tar xvf $1      ;;
			*.tbz2)      tar xvjf $1     ;;
			*.tgz)       tar xvzf $1     ;;
			*.zip)       unzip $1        ;;
			*.Z)         uncompress $1   ;;
			*.7z)        7z x $1         ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

escape() {
    local escape_string_input=$@
	if [[ ! $escape_string_input ]]; then
    	echo -n "String to escape: "
    	read escape_string_input
	fi
    printf '%q\n' "$escape_string_input"
}

#Prevent nested ranger instances
ranger() {
	if [ -z "$RANGER_LEVEL" ]; then
		/usr/bin/ranger "$@"
	else
		exit
	fi
}

#Online services
cs() { curl cheat.sh/$1; }

#create a zkbd compatible hash;
#to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

#setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   history-beginning-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" history-beginning-search-forward

bindkey -M menuselect '^[[Z' reverse-menu-complete

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
eval "$(zoxide init zsh)"
